/**
 * 组件间的通讯方式有哪些？
 * 1. Props 和 Events：父组件通过 props 向子组件传递数据，子组件通过 $emit 触发事件向父组件发送消息。这是最常见的组件间通讯方式，适用于父子组件之间的通讯。
 * 2. Vuex：Vuex 是 Vue.js 的状态管理库，适用于大型应用中多个组件需要共享状态的场景。通过 Vuex，组件可以访问和修改全局状态，实现跨组件通讯。
 * 3. Provide 和 Inject：Provide 和 Inject 允许祖先组件向其所有后代组件传递数据，而不需要通过 props 一层层传递。适用于需要跨多层组件传递数据的场景。
 * 4. Event Bus：Event Bus 是一个中央事件管理器，允许任何组件通过事件进行通讯。适用于兄弟组件之间的通讯，但在大型应用中可能导致事件管理混乱，不推荐使用。
 * 5. $parent 和 $root：组件可以通过 $parent 访问父组件，通过 $root 访问根组件。这种方式适用于简单的父子关系，但不推荐在复杂应用中使用，因为它会增加组件之间的耦合度。
 * 6. refs：通过 refs 可以直接访问子组件实例，从而调用其方法或访问其数据。适用于需要直接操作子组件的场景，但应谨慎使用以避免破坏组件的封装性。
 * 7. Slots：Slots 允许父组件向子组件传递模板内容，适用于需要动态插入内容的场景。通过具名插槽和作用域插槽，可以实现更复杂的组件间通讯。
 * 8. attrs 和 listeners：attrs 和 listeners 允许父组件将属性和事件监听器传递给子组件，适用于需要动态传递属性和事件的场景。
 * 总结：选择合适的组件间通讯方式取决于应用的复杂度和具体需求。
 *  对于简单的父子组件关系，Props 和 Events 是首选；
 *  对于复杂的状态管理，Vuex 是更好的选择；
 *  而 Provide/Inject 和 Event Bus 则适用于特定的跨组件通讯场景。
 */